{"version":3,"sources":["components/calculations.js","components/changeVideo.js","components/getPoseAndFrames.js","components/VideoInputForm.js","components/loading.gif","components/noise.gif","components/VideoOutput.js","App.js","reportWebVitals.js","index.js"],"names":["addLoads","COMs","refToScreenRatio","upperArmFy","upperArm","mass","foreArmFy","foreArm","headFy","head","trunkFy","trunk","handFy","hand","Fy","upperArmDx","x","l5s1","foreArmDx","headDx","trunkDx","handDx","Dx","upperArmM","foreArmM","headM","trunkM","handM","totalM","Mo","totalMo","spinalLoad","load","changeVideo","poses","weight","refLength","setLoading","drawPose","context","i","COMsArr","pose","poseArr","leftShoulder","position","leftElbow","leftWrist","leftHip","fillStyle","fillRect","y","sqr","drawLoad","font","fontSize","toString","fillText","Math","round","maxLoad","val","frame","h","maxBarHeight","w","j","curLoad","barHeight","min","barWidth","gif","GIF","workerScript","process","zip","JSZip","console","log","frames","width","height","frameNumber","length","ceil","shoulder","elbow","sqrt","leftEar","Number","push","createCOMsArr","abs","imgData","canvas","document","createElement","getContext","putImageData","addFrame","delay","file","toDataURL","split","base64","on","blob","gifURL","URL","createObjectURL","lift","querySelector","src","alt","removeAttribute","generateAsync","type","then","content","download","onclick","event","preventDefault","saveAs","render","getPoseAndFrames","vidURL","estimatePoseOnImg","processFrames","a","posenet","net","estimateSinglePose","flipHorizontal","keypoints","extractFramesFromVideo","videoUrl","fps","Promise","resolve","fetch","r","videoBlob","videoObjectUrl","video","addEventListener","seekResolve","duration","Infinity","isNaN","readyState","setTimeout","currentTime","random","scale","videoWidth","videoHeight","interval","drawImage","getImageData","VideoInputForm","props","processVid","vidFiles","reader","FileReader","onload","e","result","readAsDataURL","vid","submit","massInput","weightInput","refLengthInput","files","match","value","alert","setAttribute","className","onSubmit","htmlFor","step","required","id","name","accept","VideoOutput","isLoadingTemplate","loading","notLoadingTemplate","noise","disabled","isLoading","App","useState","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.9c19b234.chunk.js","sourcesContent":["/**\r\n * object containing video frame and pose data arrays\r\n * @typedef {Object} Poses\r\n * @property {ImageData[]} frames - array containing the frames of the video\r\n * @property {Array} poseArr - array containing the posenet pose data at each frame, see posenet documentation for more info about pose data\r\n*/\r\n\r\n/**\r\n * various data for a body part\r\n * @typedef {Object} BodyPart\r\n * @property {number} x - x coordinate of the COM of the body part\r\n * @property {number} y - y coordinate of the COM of the body part\r\n * @property {number} mass - mass of the body part in kg\r\n * @property {number} Fy - weight of the body part in kg\r\n * @property {number} Dx - horizontal distance between the body part ad the l5s1 joint in m\r\n * @property {number} Mo - moment caused by the body part in Nm\r\n*/\r\n\r\n/**\r\n * various data for a joint\r\n * @typedef {Object} Joint\r\n * @property {number} x - x coordinate of the joint\r\n * @property {number} y - y coordinate of the joint\r\n * @property {number} totalMo - total moment caused by the body around the joint in Nm\r\n * @property {number} load - total compressive load at the joint in N\r\n */\r\n\r\n/**\r\n * various center of mass data for a body (and l5s1 joint data)\r\n * @typedef {Object} COMs\r\n * @property {BodyPart} upperArm\r\n * @property {BodyPart} foreArm\r\n * @property {BodyPart} head\r\n * @property {BodyPart} hand - .mass, .Fy, and .Mo also include the mass of the object being lifted\r\n * @property {BodyPart} trunk\r\n * @property {Joint} l5s1\r\n*/\r\n\r\n/**\r\n * returns an array of COMs for each pose in poses\r\n * @param {Poses} poses - video frame and pose data for the lift evaluated at 5fps\r\n * @param {number} mass - mass of the object being lifted in kg\r\n * @param {number} weight - lifters mass in kg\r\n * @param {number} refToScreenRatio - real-life:on-screen ratio in px:m\r\n * @returns {COMs[]} array of COMs objects\r\n*/\r\nexport default function createCOMsArr(poses, mass, weight, refToScreenRatio)\r\n{\r\n    let COMsArr = [];\r\n    for(let i = 0; i < poses.frames.length; i++)\r\n    {\r\n        //Getting position of important posenet joints\r\n        let pose = poses.poseArr[i];\r\n        let leftShoulder = pose[5].position;\r\n        let leftElbow = pose[7].position;\r\n        let leftWrist = pose[9].position;\r\n        let leftHip = pose[11].position;\r\n        let leftEar = pose[3].position;\r\n\r\n        //Setting up COMs with position and mass\r\n        let COMs = {\r\n            upperArm: {\r\n                x: leftShoulder.x - (leftShoulder.x - leftElbow.x) * 0.447,\r\n                y: leftShoulder.y - (leftShoulder.y - leftElbow.y) * 0.447,\r\n                mass: 0.03075 * weight\r\n            },\r\n            foreArm: {\r\n                x: leftElbow.x - (leftElbow.x - leftWrist.x) * 0.432,\r\n                y: leftElbow.y - (leftElbow.y - leftWrist.y) * 0.432,\r\n                mass: 0.0172 * weight\r\n            },\r\n            head: {\r\n                x: leftEar.x,\r\n                y: leftEar.y,\r\n                mass: 0.0823 * weight\r\n            },\r\n            trunk: {\r\n                x: leftHip.x - (leftHip.x - leftShoulder.x)* 0.5995,\r\n                y: leftHip.y - (leftHip.y - leftShoulder.y)* 0.5995,\r\n                mass: 0.5415 * weight\r\n            },\r\n            hand: {\r\n                x: leftWrist.x - (leftElbow.x - leftWrist.x) * (0.108 / 0.145) * 0.4,\r\n                y: leftWrist.y - (leftElbow.y - leftWrist.y) * (0.108 / 0.145) * 0.4,\r\n                mass: 0.00575 * weight + Number(mass)\r\n            },\r\n            l5s1: {\r\n                x: leftHip.x - (leftHip.x - leftShoulder.x)* 0.25,\r\n                y: leftHip.y - (leftHip.y - leftShoulder.y)* 0.25,\r\n            }\r\n        };\r\n        \r\n        addLoads(COMs, refToScreenRatio)\r\n        COMsArr.push(COMs);\r\n    }\r\n\r\n    return COMsArr;\r\n}\r\n\r\n\r\n/**\r\n * adds Fy, Dx, Mo, totalMo and load data to a COMs object\r\n * @param {COMs} COMs - a COMs object\r\n * @param {number} refToScreenRatio - real-life:on-screen ratio in px:m\r\n */\r\nfunction addLoads(COMs, refToScreenRatio)\r\n{\r\n    // Force data\r\n    let upperArmFy = COMs.upperArm.mass * 9.81;\r\n    let foreArmFy = COMs.foreArm.mass * 9.81;\r\n    let headFy = COMs.head.mass * 9.81;\r\n    let trunkFy = COMs.trunk.mass * 9.81;\r\n    let handFy = COMs.hand.mass * 9.81;\r\n\r\n    COMs.upperArm.Fy = upperArmFy;\r\n    COMs.foreArm.Fy = foreArmFy;\r\n    COMs.head.Fy = headFy;\r\n    COMs.trunk.Fy = trunkFy;\r\n    COMs.hand.Fy = handFy;\r\n    \r\n    // Distance data\r\n    let upperArmDx = -(COMs.upperArm.x - COMs.l5s1.x) * refToScreenRatio;\r\n    let foreArmDx = -(COMs.foreArm.x - COMs.l5s1.x) * refToScreenRatio;\r\n    let headDx = -(COMs.head.x - COMs.l5s1.x) * refToScreenRatio;\r\n    let trunkDx = -(COMs.trunk.x - COMs.l5s1.x) * refToScreenRatio;\r\n    let handDx = -(COMs.hand.x - COMs.l5s1.x) * refToScreenRatio;\r\n\r\n    COMs.upperArm.Dx = upperArmDx;\r\n    COMs.foreArm.Dx = foreArmDx;\r\n    COMs.head.Dx = headDx;\r\n    COMs.trunk.Dx = trunkDx;\r\n    COMs.hand.Dx = handDx;\r\n\r\n    //Moment data\r\n    let upperArmM = upperArmFy * upperArmDx;\r\n    let foreArmM = foreArmFy * foreArmDx;\r\n    let headM = headFy * headDx;\r\n    let trunkM = trunkFy * trunkDx;\r\n    let handM = handFy * handDx;\r\n    let totalM = (upperArmM + foreArmM + handM) * 2 + headM + trunkM;\r\n\r\n    COMs.upperArm.Mo = upperArmM;\r\n    COMs.foreArm.Mo = foreArmM;\r\n    COMs.head.Mo = headM;\r\n    COMs.trunk.Mo = trunkM;\r\n    COMs.hand.Mo = handM;\r\n    COMs.l5s1.totalMo = totalM;\r\n\r\n    //L5S1 load data\r\n    let spinalLoad = (upperArmFy + foreArmFy + handFy) * 2 + headFy + trunkFy + totalM/0.05;\r\n    COMs.l5s1.load = spinalLoad;\r\n}\r\n","import createCOMsArr from './calculations';\r\nimport GIF from \"gif.js\";\r\nimport JSZip from 'jszip';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * object containing video frame and pose data arrays\r\n * @typedef {Object} Poses\r\n * @property {ImageData[]} frames - array containing the frames of the video\r\n * @property {Array} poseArr - array containing the posenet pose data at each frame, see posenet documentation for more info about pose data\r\n*/\r\n\r\n/**\r\n * replaces the loading gif with a gif of the evaluated lift\r\n * @param {Poses} poses - video frame and pose data for the lift evaluated\r\n * @param {number} mass - mass of the object being lifted in kg\r\n * @param {number} weight - lifters mass in kg\r\n * @param {number} refLength - the distance between the shoulder and elbow in real life in m\r\n * @param {Function} setLoading - the function to set the isLoading state\r\n*/\r\nexport default function changeVideo(poses, mass, weight, refLength, setLoading)\r\n{\r\n    /**\r\n     * Function to draw COMs and posenet joint locations on a given frame\r\n     * @param {CanvasRenderingContext2D} context - canvas context for target frame\r\n     * @param {number} i - frame number\r\n     */\r\n    function drawPose(context, i)\r\n    {\r\n        let COMs = COMsArr[i];\r\n        let pose = poses.poseArr[i];\r\n\r\n        //getting position of posenet joints\r\n        let leftShoulder = pose[5].position;\r\n        let leftElbow = pose[7].position;\r\n        let leftWrist = pose[9].position;\r\n        let leftHip = pose[11].position;\r\n        \r\n        //posenet joints\r\n        context.fillStyle = \"Red\";\r\n        context.fillRect(leftShoulder.x, leftShoulder.y, sqr, sqr);\r\n        context.fillRect(leftElbow.x, leftElbow.y, sqr, sqr);\r\n        context.fillRect(leftHip.x, leftHip.y, sqr, sqr);\r\n        context.fillRect(leftWrist.x, leftWrist.y, sqr, sqr);\r\n        \r\n        //COMS\r\n        context.fillStyle = \"Grey\";\r\n        context.fillRect(COMs.upperArm.x, COMs.upperArm.y, sqr, sqr);\r\n        context.fillRect(COMs.foreArm.x, COMs.foreArm.y, sqr, sqr);\r\n        context.fillRect(COMs.head.x, COMs.head.y, sqr, sqr);\r\n        context.fillRect(COMs.trunk.x, COMs.trunk.y, sqr, sqr);\r\n        context.fillRect(COMs.hand.x, COMs.hand.y, sqr, sqr);\r\n \r\n        //l5S1 joint\r\n        context.fillStyle = \"White\";\r\n        context.fillRect(COMs.l5s1.x, COMs.l5s1.y, sqr, sqr);\r\n    }\r\n\r\n    /**\r\n     * function to draw the l5s1 load bar graph on a given frame\r\n     * @param {CanvasRenderingContext2D} context - canvas context for target frame\r\n     * @param {number} i - frame number\r\n     */\r\n    function drawLoad(context, i)\r\n    {\r\n        let load = COMsArr[i].l5s1.load;\r\n        context.font = fontSize.toString() + \"px Arial\";\r\n\r\n        //Writing the maxLoad and current load to canvas\r\n        context.fillStyle = \"White\";\r\n        context.fillText(\"maxLoad: \" + Math.round(maxLoad.val) + \" N, Frame: \" + maxLoad.frame, fontSize/4, h - maxBarHeight - (fontSize/4), w);\r\n        context.fillText(\"Load: \" + Math.round(load) + \" N\", fontSize/4, h - maxBarHeight - fontSize * (3/2), w);\r\n\r\n        //Drawing the graph\r\n        context.fillStyle = \"Green\";\r\n        for(let j = 0; j <= i; j++)\r\n        {\r\n            let curLoad = COMsArr[j].l5s1.load;\r\n            context.fillStyle = curLoad < 3432 ? \"Green\": curLoad < 6500 ? \"Yellow\" : \"Red\";\r\n            let barHeight = Math.min(curLoad/maxLoad.val * maxBarHeight, curLoad/6800 * maxBarHeight);\r\n            context.fillRect(j * barWidth, h - barHeight, barWidth, barHeight);\r\n        }\r\n    }\r\n\r\n    //Main starts here----------------------------------\r\n    let gif = new GIF({\r\n        workerScript: process.env.PUBLIC_URL + '/gif.worker.js'\r\n    });\r\n    let zip = new JSZip();\r\n\r\n    //Calculating the size of important elements to draw on canvas\r\n    console.log(\"Doing Calculations\");\r\n    console.log(\"refLength: \" + refLength);\r\n    console.log(\"weight: \" + weight);\r\n    console.log(\"mass: \" + mass);\r\n    \r\n    //Calculating the size of important elements to draw on canvas\r\n    let w = poses.frames[0].width;\r\n    let h = poses.frames[0].height;\r\n    let sqr = Math.min(w/30, h/30);\r\n    let fontSize = Math.min(h/15, w/15);\r\n    let frameNumber = poses.frames.length;\r\n    let barWidth = Math.ceil(w/frameNumber);\r\n    let maxBarHeight = h/10\r\n\r\n    //Calculating refToScreenRatio\r\n    let shoulder = poses.poseArr[0][5].position;\r\n    let elbow = poses.poseArr[0][7].position;\r\n    let screenLength = Math.sqrt((elbow.x - shoulder.x)**2 + (elbow.y - shoulder.y)**2);\r\n    let refToScreenRatio = refLength/screenLength; // px:m\r\n    console.log(\"refToScreenRatio: \" + refToScreenRatio);\r\n\r\n    let COMsArr = createCOMsArr(poses, mass, weight, refToScreenRatio);\r\n    console.log(COMsArr);\r\n\r\n    //Finding the maximum load and at which frame it occurs\r\n    let maxLoad = {\r\n        val: 0,\r\n        frame: -1\r\n    };\r\n    for(let i = 0; i < COMsArr.length; i++){\r\n        let load = Math.abs(COMsArr[i].l5s1.load);\r\n        if(load > maxLoad.val)\r\n        {\r\n            maxLoad.val = load;\r\n            maxLoad.frame = i;\r\n        }\r\n    }\r\n\r\n    console.log(\"Getting Video\")\r\n    for(let i = 0; i < poses.frames.length; i++)\r\n    {\r\n        let imgData = poses.frames[i];\r\n        \r\n        //creating a canvas for the frame\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width = w;\r\n        canvas.height = h;\r\n        let context = canvas.getContext('2d');\r\n        \r\n        //Writing the frame number to canvas\r\n        context.putImageData(imgData, 0, 0);\r\n        context.font = fontSize.toString() + \"px Arial\";\r\n        context.fillStyle = \"White\";\r\n        context.fillText(\"Frame: \" + i, fontSize/4, fontSize, w);\r\n\r\n        drawPose(context, i);\r\n        drawLoad(context, i);\r\n\r\n        //Adding the frame to the gif and zip\r\n        let fps = 5;\r\n        gif.addFrame(canvas, {delay: 1000/fps});\r\n        zip.file(\"frame\" + i + \".jpg\", canvas.toDataURL(\"image/jpeg\").split(';base64,')[1], {base64: true});\r\n    }\r\n\r\n    gif.on(\"finished\", function(blob) {\r\n        //Changing the video\r\n        setLoading(false);\r\n        let gifURL = URL.createObjectURL(blob);\r\n        let lift = document.querySelector(\"#lift\");\r\n        lift.src = gifURL;\r\n        lift.alt = \"lift\";\r\n\r\n        let submit = document.querySelector('button[type=\"submit\"]');\r\n        submit.removeAttribute(\"disabled\");\r\n\r\n        //Creating the download frames button\r\n        zip.generateAsync({type:\"blob\"})\r\n        .then(function(content) {\r\n            let download = document.querySelector(\"#download\");\r\n            download.onclick = function(event){\r\n                event.preventDefault();\r\n                saveAs(content, \"frames.zip\");\r\n            }\r\n            download.removeAttribute(\"disabled\");\r\n            console.log(\"finished\");\r\n        });\r\n    });\r\n\r\n    //Calls the gif finished event (see above)\r\n    gif.render();\r\n}","import * as tf from \"@tensorflow/tfjs\"; //Not used but need for posenet to work\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\n\r\n/**\r\n * object containing video frame and pose data arrays\r\n * @typedef {Object} Poses\r\n * @property {ImageData[]} frames - array containing the frames of the video at 5fps\r\n * @property {Array} poseArr - array containing the posenet pose data at each frame, see posenet documentation for more info about pose data\r\n*/\r\n\r\n/**\r\n * splits the video into frames at 5fps and returns ImageData and posenet pose data at each frame\r\n * @param {string} vidURL - dataURL of the video\r\n * @returns {Poses} video frame and pose data for the lift evaluated at 5fps\r\n*/\r\nexport default async function getPoseAndFrames(vidURL){\r\n    /**\r\n     * uses posenet to get pose data for the given frame\r\n     * @param {ImageData} imgData - ImageData of frame to pass to posenet\r\n     * @returns {posenet.Keypoint[]} pose data for the frame\r\n    */\r\n    async function estimatePoseOnImg(imgData){\r\n        if(imgData !== null){\r\n            const net = await posenet.load();\r\n            const pose = await net.estimateSinglePose(\r\n                imgData, \r\n                {flipHorizontal: false}\r\n            );\r\n\r\n            return (pose.keypoints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * adds posenet pose data for each frame to poses.poseArr\r\n     * @param {ImageData[]} frames - array containing frames of the video\r\n    */\r\n    async function processFrames(frames)\r\n    {\r\n        for(let i = 0; i < frames.length; i++){\r\n            let pose = await estimatePoseOnImg(frames[i]);\r\n            poses.poseArr.push(pose);\r\n        }\r\n    }\r\n\r\n    //Main starts here----------------------------------------------------------------\r\n    let poses = {\r\n        poseArr: [], //contains pose\r\n        frames: [] //contains ImageData\r\n    }\r\n\r\n    let frames = await extractFramesFromVideo(vidURL, 5);\r\n    poses.frames = frames;\r\n    await processFrames(poses.frames);\r\n    return poses;\r\n}\r\n\r\n/**\r\n * breaks the video in frames\r\n * @param {string} videoUrl - dataURL of the video\r\n * @param {number} fps - frame rate to break video at (defaults to 5)\r\n * @returns \r\n*/\r\n    async function extractFramesFromVideo(videoUrl, fps=5) {\r\n    return new Promise(async (resolve) => {\r\n    \r\n        // fully download it first (no buffering):\r\n        let videoBlob = await fetch(videoUrl).then(r => r.blob());\r\n        let videoObjectUrl = URL.createObjectURL(videoBlob);\r\n        let video = document.createElement(\"video\");\r\n    \r\n        let seekResolve;\r\n        video.addEventListener('seeked', async function() {\r\n            if(seekResolve) seekResolve();\r\n        });\r\n    \r\n        video.src = videoObjectUrl;\r\n    \r\n        // workaround chromium metadata bug (https://stackoverflow.com/q/38062864/993683)\r\n        while((video.duration === Infinity || isNaN(video.duration)) && video.readyState < 2) {\r\n            await new Promise(r => setTimeout(r, 1000));\r\n            video.currentTime = 10000000*Math.random();\r\n        }\r\n        let duration = video.duration;\r\n    \r\n        let canvas = document.createElement('canvas');\r\n        let context = canvas.getContext('2d');\r\n        let scale = Math.min(1, 500/video.videoWidth, 500/video.videoHeight);\r\n        let [w, h] = [video.videoWidth * scale, video.videoHeight * scale];\r\n        canvas.width =  w;\r\n        canvas.height = h;\r\n    \r\n        let frames = [];\r\n        let interval = 1 / fps;\r\n        let currentTime = 0;\r\n    \r\n        //getting image data at each frame\r\n        while(currentTime < duration) {\r\n            video.currentTime = currentTime;\r\n            await new Promise(r => seekResolve=r);\r\n    \r\n            context.drawImage(video, 0, 0, w, h);\r\n            let imgData = context.getImageData(0, 0, w, h);\r\n            frames.push(imgData);\r\n    \r\n            currentTime += interval;\r\n        }\r\n        resolve(frames);\r\n    });\r\n}","import React from 'react';\r\nimport changeVideo from './changeVideo';\r\nimport getPoseAndFrames from './getPoseAndFrames';\r\n\r\nexport default function VideoInputForm(props){ \r\n    async function processVid(vidFiles){\r\n        let result = await new Promise(\r\n            (resolve) => {\r\n                let reader = new FileReader();\r\n                reader.onload = (e) => resolve(reader.result);\r\n                reader.readAsDataURL(vidFiles[0]);\r\n            }\r\n        )\r\n        return result;\r\n    }\r\n    \r\n    async function handleSubmit(event)\r\n    {\r\n        event.preventDefault();\r\n        let vid = document.querySelector(\"input[type=file]\");\r\n        let submit = document.querySelector(\"button[type=submit]\");\r\n        let massInput = document.querySelector(\"#mass\");\r\n        let weightInput = document.querySelector(\"#weight\");\r\n        let refLengthInput = document.querySelector(\"#ref_length\");\r\n\r\n        //validating form\r\n        if(!vid.files[0].type.match(\"video.*\") || weightInput.value <= 0 || refLengthInput.value <= 0)\r\n        {\r\n            if(!vid.files[0].type.match(\"video.*\"))\r\n                alert(\"Please upload a video file, some acceptable formats are: .mp4, .m4v, .mov, .avi, .mpg, .webm\");\r\n            else\r\n                alert(\"Please enter non-zero values for upper arm length and weight\");\r\n            return;\r\n        }\r\n\r\n        let mass = massInput.value;\r\n        let weight = weightInput.value;\r\n        let refLength = refLengthInput.value;\r\n        let vidURL = await processVid(vid.files);\r\n        \r\n        props.setLoading(true);\r\n        submit.setAttribute(\"disabled\", '');\r\n        vid.value = \"\";\r\n        massInput.value = \"\";\r\n        weightInput.value = \"\";\r\n        refLengthInput.value = \"\";\r\n\r\n        console.log(\"Getting poses\");\r\n        let poses = await getPoseAndFrames(vidURL);\r\n        console.log(poses);\r\n\r\n        changeVideo(poses, mass, weight, refLength, props.setLoading);\r\n    }\r\n\r\n    const template = (\r\n        <form className=\"video_input_form\" onSubmit={handleSubmit}>\r\n            <div className=\"input_line\">\r\n                <label htmlFor=\"ref_length\">Length of upper arm (shoulder to elbow)(m): </label>\r\n                <input type=\"number\" min=\"0\" step=\"any\" required id=\"ref_length\" name=\"ref_length\"/>\r\n            </div> \r\n            <div className=\"input_line\">\r\n                <label htmlFor=\"weight\">Your weight (kg): </label>\r\n                <input type=\"number\" min=\"0\" step=\"any\" required id=\"weight\" name=\"weight\" />\r\n                <label htmlFor=\"mass\">Mass of object (kg): </label>\r\n                <input type=\"number\" min=\"0\" step=\"any\" required id=\"mass\" name=\"mass\" />\r\n            </div>\r\n            <div className=\"input_line\">\r\n                <label htmlFor=\"videoFile\">Upload a new video: </label>\r\n                <input type=\"file\" accept=\"video/*\" required id=\"videoFile\" name=\"videoFile\"/>\r\n                <button type=\"submit\">Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n\r\n    return(template);\r\n}","export default __webpack_public_path__ + \"static/media/loading.ee7e6982.gif\";","export default __webpack_public_path__ + \"static/media/noise.5cb9fa79.gif\";","import loading from './loading.gif';\r\nimport noise from './noise.gif';\r\n\r\nexport default function VideoOutput(props)\r\n{\r\n    let isLoadingTemplate = (\r\n        <div id=\"video_output\">\r\n            <img src={loading} alt='loading' />\r\n        </div>\r\n    );\r\n\r\n    let notLoadingTemplate = (\r\n        <div id=\"video_output\">\r\n            <img src={noise} alt='temp' id=\"lift\" />\r\n            <button id=\"download\" disabled>Download Frames</button>\r\n        </div>\r\n    );\r\n\r\n    return(props.isLoading ? isLoadingTemplate : notLoadingTemplate)\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\nimport VideoInputForm from \"./components/VideoInputForm\";\nimport VideoOutput from \"./components/VideoOutput\";\nimport './App.css';\n\n\nexport default function App() {\n  const [isLoading, setLoading] = useState(false);\n\n  const template = (\n    <div className=\"App\">\n      <h1>Spinal Load Evaluator</h1>\n      <p>Restrictions: </p>\n      <ul>\n        <li>Record lift from lifter's left side</li>\n        <li>Two handed lifts only</li>\n        <li>Entire head, trunk(shoulder to hips) and arms must be visible</li>\n        <li>No twisting during lift</li>\n        <li>Object being lifted cannot have a long moment arm</li>\n        <li>Please limit video length to under 15 seconds</li>\n      </ul>\n      <VideoOutput\n        isLoading={isLoading}\n      />\n      <VideoInputForm \n        setLoading={setLoading}\n      />\n      <p>Output Colors: </p>\n      <ul>\n        <li>Red: Location of relevant parts detected by posenet</li>\n        <li>Grey: Location of body segment center of masses</li>\n        <li>White: Location of the L5/S1 joint</li>\n      </ul>\n      <div className=\"footer\">\n      <p>Notes: </p>\n        <ul>\n          <li>Accuracy of force values is dependent on accurate detection of the location of these pody parts:\n            <ul>\n              <li>Left wrist, left elbow, left shoulder, left hip, left ear</li>\n            </ul>\n          </li>\n          <li>Please check that posenet has acurately determined the location of the above body parts in the video\n            <ul>\n              <li>Perfect detection is rare, if the estimation of location is far off, try taking the video again </li>\n              <li>At best, force values should only be used as an estimation. </li>\n              <li>Change in force throughout lift should generally be of more interest.</li>\n            </ul>\n          </li>\n          <li>Program assumes that center of mass of the object being lifted is at the same place as the hand</li>\n          <li>Program assumes that the lift begins at the first fram and ends at the last</li>\n          <li>Upper arm length is used to determine real-life:on-screen distance ratio</li>\n          <li>Uses a 2D statics based evaluation of force at each frame</li>\n          <li>Video output is in the form of a gif, analysis done at 5 fps</li>\n        </ul>\n        <p>Packages and References: </p>\n        <ul>\n          <li>React: <a href=\"https://reactjs.org/\">https://reactjs.org/</a></li> \n          <li>Posenet: <a href=\"https://github.com/tensorflow/tfjs-models/tree/master/posenet\">https://github.com/tensorflow/tfjs-models/tree/master/posenet</a></li>\n          <li>file-saver: <a href=\"https://github.com/eligrey/FileSaver.js\">https://github.com/eligrey/FileSaver.js</a></li>\n          <li>gif.js: <a href=\"https://github.com/jnordberg/gif.js\">https://github.com/jnordberg/gif.js</a></li>\n          <li>jszip: <a href=\"https://stuk.github.io/jszip/\">https://stuk.github.io/jszip/</a></li>\n          <li>Body segment masses and center of mass: <a href=\"https://doi.org/10.1080/02701367.1983.10605290\">https://doi.org/10.1080/02701367.1983.10605290</a></li>\n          <li>Body Segment Lengths: Winter DA. Biomechanics and motor control of human movement. John Wiley & Sons; 2009. </li>\n          <li>Spinal compression limits: <a href=\"https://doi.org/10.1080/00140139308967899\">https://doi.org/10.1080/00140139308967899</a></li>\n        </ul>\n      </div>\n    </div>\n  );\n  \n  return (template);\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}